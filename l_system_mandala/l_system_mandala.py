import matplotlib.pyplot as plt
import math
import random

def l_system(axiom, rules, depth):
    """
    Generates the result of an L-system by iteratively applying rules to the axiom.

    Parameters:
    - axiom (str): The initial string representing the starting state of the L-system.
    - rules (dict): A dictionary where keys are characters in the axiom, and values are their replacement strings.
    - depth (int): The number of iterations to apply the rules.

    Returns:
    - str: The final string after applying the rules for the specified number of iterations.
    """
    result = axiom
    for i in range(depth):
        next_result = ""
        for char in result:
            next_result += rules.get(char, char)
        result = next_result
    return result

def to_radians(angle):
    """
    Converts an angle from degrees to radians.

    Parameters:
    - angle (float): The angle in degrees.

    Returns:
    - float: The angle converted to radians.
    """
    return angle * math.pi / 180

def draw_l_system(instructions, angle):
    """
    Draws the L-system based on the provided instructions and angle.

    Parameters:
    - instructions (str): The sequence of commands generated by the L-system.
    - angle (float): The turning angle (in degrees) for '+' and '-' commands.

    Returns:
    - tuple: 
        - coords (list of tuples): A list of (x, y) coordinates representing the path.
        - colors (list of str): A list of color codes for each segment of the path.
    """
    # Initialize starting position, direction, and a stack for saving/restoring states.
    x, y = 0, 0
    direction = 0
    stack = []
    coords = [(x, y)]
    colors = []

    # Define a list of colors for the segments.
    color_list = [
        "#FF6347",  
        "#1E90FF",  
        "#32CD32", 
        "#8A2BE2",  
        "#FF8C00",  
        "#00CED1",  
        "#FF1493"   
    ]

    for command in instructions:
        if command == "G":  # Move forward.
            new_x = x + math.cos(to_radians(direction))
            new_y = y + math.sin(to_radians(direction))
            coords.append((new_x, new_y))
            x, y = new_x, new_y
            colors.append(random.choice(color_list))
        elif command == "+":  # Turn right.
            direction += angle
        elif command == "-":  # Turn left.
            direction -= angle
        elif command == "[":  # Save current state.
            stack.append((x, y, direction))
        elif command == "]":  # Restore previous state.
            x, y, direction = stack.pop()
            coords.append((x, y))
            colors.append(random.choice(color_list))

    return coords, colors

# Define the initial axiom and production rules.
axiom = "X---------X-------X"
rules = {
    "X": "[G][+G][-G][++G][--G][+++G][---G][++++G][----G]",
    "G": "GGG[--G][++G]"
}
depth = 6  # Number of iterations to apply the rules.
angle = 15  # Turning angle in degrees.

# Generate L-system instructions.
instructions = l_system(axiom, rules, depth)

# Convert instructions into coordinates and colors.
coords, colors = draw_l_system(instructions, angle)
x_coords, y_coords = zip(*coords)

# Plot the L-system.
plt.figure(figsize=(10, 10))  # Set the size of the plot

for i in range(1, len(x_coords)):
    plt.plot(x_coords[i-1:i+1], y_coords[i-1:i+1], color=colors[i-1], linewidth=0.5)

plt.xlim(min(x_coords) - 10, max(x_coords) + 10)
plt.ylim(min(y_coords) - 10, max(y_coords) + 10)

plt.gca().set_aspect('equal', adjustable='box')  

plt.axis("off")  # Turn off the axis to avoid displaying axis labels and ticks
plt.show()
